"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[587],{76830:e=>{e.exports=JSON.parse('{"functions":[{"name":"BeforeDestroy","desc":"Connects to a signal that is fired when the :Destroy() method is called.","params":[{"name":"callback","desc":"","lua_type":"(replion: ClientReplion) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":125,"path":"src/Client/ClientReplion.lua"}},{"name":"OnDataChange","desc":"Connects to a signal that is fired when a value is changed in the data. ","params":[{"name":"callback","desc":"","lua_type":"(newData: any, path: { string }) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":136,"path":"src/Client/ClientReplion.lua"}},{"name":"OnChange","desc":"```lua\\nreplion:OnChange(\'Coins\', function(newValue: any, oldValue: any)\\n\\tprint(newValue, oldValue)\\nend)\\n```\\n\\n\\n\\nThis function is called when the value of the path changes.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(newValue: any, oldValue: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":154,"path":"src/Client/ClientReplion.lua"}},{"name":"OnDescendantChange","desc":"```lua\\n-- On the server\\nreplion:Set({\'Areas\', \'Ice\'}, true)\\n```\\n\\n```lua\\nreplion:OnDescendantChange(\'Areas\', function(path: { string }, newValue: any, oldValue: any)\\n\\tprint(path, newValue, oldValue) --\x3e {\'Areas\', \'Ice\'}, true, false\\nend)\\n```\\n\\n\\n\\nThis event will be fired when any descendant of the path is changed.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(path: { string }, newDescendantValue: any, oldDescendantValue: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":177,"path":"src/Client/ClientReplion.lua"}},{"name":"OnArrayInsert","desc":"Connects to a signal that is fired when a value is inserted in the array at the given path.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(index: number, value: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":189,"path":"src/Client/ClientReplion.lua"}},{"name":"OnArrayRemove","desc":"Connects to a signal that is fired when a value is removed in the array at the given path.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(index: number, value: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":201,"path":"src/Client/ClientReplion.lua"}},{"name":"Find","desc":"```lua\\nlocal index: number?, item: string? = replion:Find(\'Items\', \'Bow\')\\n```\\n\\n\\n:::note Arrays only\\nThis only works on Arrays.\\n\\nTry to find the value in the array at the given path, and returns the index and value.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"value","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"number?"},{"desc":"","lua_type":"T?"}],"function_type":"method","source":{"line":336,"path":"src/Client/ClientReplion.lua"}},{"name":"Get","desc":"```lua\\nlocal coins: number? = newReplion:Get(\'Coins\')\\n```\\n\\n\\nReturns the value at the given path. If no path is given, returns the entire data table.\\nIf you are expecting a value to exist, use `Replion:GetExpect` instead.","params":[{"name":"path","desc":"","lua_type":"path"}],"returns":[{"desc":"","lua_type":"T?\\n"}],"function_type":"method","source":{"line":360,"path":"src/Client/ClientReplion.lua"}},{"name":"GetExpect","desc":"```lua\\nlocal coins: number = Replion:GetExpect(\'Coins\')\\nlocal gems: number = Replion:GetExpect(\'Gems\', \'Gems does not exist!\')\\n```\\n\\n\\n\\nSame as `Replion:Get`, but throws an error if the path does not have a value.\\nYou can set a custom error message by passing it as the second argument.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"message","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"T\\n"}],"function_type":"method","errors":[{"lua_type":"\\"Invalid path\\"","desc":"This error is thrown when the path does not have a value."}],"source":{"line":378,"path":"src/Client/ClientReplion.lua"}}],"properties":[{"name":"Destroyed","desc":"","lua_type":"boolean?","readonly":true,"source":{"line":71,"path":"src/Client/ClientReplion.lua"}},{"name":"Data","desc":"","lua_type":"{ [any]: any }","readonly":true,"source":{"line":77,"path":"src/Client/ClientReplion.lua"}},{"name":"Tags","desc":"","lua_type":"{ string }?","readonly":true,"source":{"line":83,"path":"src/Client/ClientReplion.lua"}},{"name":"ReplicateTo","desc":"","lua_type":"ReplicateTo","source":{"line":88,"path":"src/Client/ClientReplion.lua"}}],"types":[{"name":"Path","desc":"","lua_type":"string | { string }","source":{"line":65,"path":"src/Client/ClientReplion.lua"}}],"name":"ClientReplion","desc":"","realm":["Client"],"source":{"line":94,"path":"src/Client/ClientReplion.lua"}}')}}]);