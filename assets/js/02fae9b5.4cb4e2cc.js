"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(t),d=l,f=u["".concat(p,".").concat(d)]||u[d]||y[d]||o;return t?r.createElement(f,a(a({ref:n},s),{},{components:t})):r.createElement(f,a({ref:n},s))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:l,a[1]=i;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},76647:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(87462),l=(t(67294),t(3905));const o={},a=void 0,i={type:"mdx",permalink:"/Replion/",source:"@site/pages/index.md",description:"Replion is a module that allows the replication of information from Server to Client lightly and efficiently.",frontMatter:{}},p=[{value:"Wally",id:"wally",level:2},{value:"<strong>Server</strong>",id:"server",level:3},{value:"<strong>Client</strong>",id:"client",level:3}],c={toc:p},s="wrapper";function u(e){let{components:n,...t}=e;return(0,l.kt)(s,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",{align:"center"},(0,l.kt)("img",{src:".github/logo.svg",height:"180"}),(0,l.kt)("br",null),"Replion is a module that allows the replication of information from Server to Client lightly and efficiently."),(0,l.kt)("h1",{id:"installation"},"Installation"),(0,l.kt)("h2",{id:"wally"},"Wally"),(0,l.kt)("p",null,"Add Replion as a dependency to your ",(0,l.kt)("inlineCode",{parentName:"p"},"wally.toml")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Replion = "ytrev/replion@2.0.0-rc.4"\n')),(0,l.kt)("h1",{id:"usage"},"Usage"),(0,l.kt)("p",null,"A simple example that shows how to use Replion."),(0,l.kt)("h3",{id:"server"},(0,l.kt)("strong",{parentName:"h3"},"Server")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local Players = game:GetService('Players')\n\nlocal Replion = require(path.to.replion)\n\ntype DataReplion = Replion.ServerReplion<{\n    Coins: number,\n}>\n\nlocal function createReplion(player: Player)\n    Replion.Server.new({\n        Channel = 'Data',\n        ReplicateTo = player,\n\n        Data = {\n            Coins = 0,\n        }\n    })\nend\n\nPlayers.PlayerAdded:Connect(createReplion)\n\nfor _, player: Player in Players:GetPlayers() do\n    task.spawn(createReplion, player)\nend\n\nwhile true do\n    for _, player: Player in Players:GetPlayers() do\n        local playerReplion: DataReplion? = Replion.Server:GetReplionFor(player, 'Data')\n        if not playerReplion then\n            continue\n        end\n\n        playerReplion:Increase('Coins', 10)\n    end\n\n    task.wait(1)\nend\n")),(0,l.kt)("h3",{id:"client"},(0,l.kt)("strong",{parentName:"h3"},"Client")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local Replion = require(path.to.replion)\n\nReplion.Client:AwaitReplion('Data', function(dataReplion)\n    print('Coins:', dataReplion:Get('Coins'))\n\n    local connection = dataReplion:OnChange('Coins', function(newCoins: number, oldCoins: number)\n        print('Coins:', newCoins)\n    end)\nend)\n")))}u.isMDXComponent=!0}}]);