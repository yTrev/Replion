"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[845],{34208:e=>{e.exports=JSON.parse('{"functions":[{"name":"_serialize","desc":"Serializes the data to be sent to the client.","params":[],"returns":[{"desc":"","lua_type":"SerializedReplion"}],"function_type":"method","private":true,"source":{"line":214,"path":"src/Server/ServerReplion.lua"}},{"name":"BeforeDestroy","desc":"Connects to a signal that is fired when the :Destroy() method is called.","params":[{"name":"callback","desc":"","lua_type":"(replion: ServerReplion) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":228,"path":"src/Server/ServerReplion.lua"}},{"name":"OnDataChange","desc":"Connects to a signal that is fired when a value is changed in the data. ","params":[{"name":"callback","desc":"","lua_type":"(newData: any, path: Path) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":239,"path":"src/Server/ServerReplion.lua"}},{"name":"OnChange","desc":"Connects to a signal that is fired when the value at the given path is changed.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(newValue: any, oldValue: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":251,"path":"src/Server/ServerReplion.lua"}},{"name":"OnArrayInsert","desc":"Connects to a signal that is fired when a value is inserted in the array at the given path.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(index: number, value: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":263,"path":"src/Server/ServerReplion.lua"}},{"name":"OnArrayRemove","desc":"Connects to a signal that is fired when a value is removed in the array at the given path.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(index: number, value: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":275,"path":"src/Server/ServerReplion.lua"}},{"name":"SetReplicateTo","desc":"Sets the players to which the data should be replicated.","params":[{"name":"replicateTo","desc":"","lua_type":"ReplicateTo"}],"returns":[],"function_type":"method","source":{"line":284,"path":"src/Server/ServerReplion.lua"}},{"name":"Set","desc":"```lua\\nlocal newCoins: number = Replion:Set(\'Coins\', 79)\\nprint(newCoins) --\x3e 79\\n```\\n\\n\\nSets the value at the given path to the given value.\\nIf you\'re updating a table is recommended to use [ServerReplion:Update] instead of `ServerReplion:Set` \\nto avoid sending unnecessary data to the client.","params":[{"name":"path","desc":"","lua_type":"Path | { [any] : any }"},{"name":"newValue","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"T\\n"}],"function_type":"method","source":{"line":344,"path":"src/Server/ServerReplion.lua"}},{"name":"Update","desc":"```lua\\nlocal newReplion = ReplionServer.new({\\n\\tChannel = \'Data\',\\n\\tReplicateTo = \'All\',\\n\\tData = {\\n\\t\\tItems = {\\n\\t\\t\\tBow = true,\\n\\t\\t}\\n\\t},\\n})\\n\\nnewReplion:Update(\'Items\', {\\n\\tSword = true,\\n\\tBow = Replion.None\\n})\\n\\nnewReplion:Update({\\n\\tLevel = 20,\\n})\\n```\\n\\n\\nUpdates the data with the given table. Only the keys that are different will be sent to the client.\\nIf you want to remove a key, set it to `Replion.None`.\\n\\nYou can update the root data by passing a table as the first argument.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"toUpdate","desc":"","lua_type":"{ [any]: any }?"}],"returns":[],"function_type":"method","source":{"line":452,"path":"src/Server/ServerReplion.lua"}},{"name":"Increase","desc":"```lua\\nlocal newCoins: number = Replion:Increase(\'Coins\', 20)\\n```\\n\\n\\nIncreases the value at the given path by the given amount.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"amount","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":536,"path":"src/Server/ServerReplion.lua"}},{"name":"Decrease","desc":"```lua\\nlocal newCoins: number = Replion:Decrease(\'Coins\', 20)\\n```\\n\\n\\nDecreases the value at the given path by the given amount.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"amount","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":573,"path":"src/Server/ServerReplion.lua"}},{"name":"Insert","desc":"```lua\\nlocal newReplion = ReplionServer.new({\\n\\tChannel = \'Data\',\\n\\tReplicateTo = player,\\n\\tData = {\\n\\t\\tItems = {\\n\\t\\t\\t\'Bow\'\\n\\t\\t}\\n\\t}\\n})\\n\\nnewReplion:Insert(\'Items\', \'Sword\')\\nnewReplion:Insert(\'Items\', \'Diamond Sword\', 1)\\n```\\n\\n\\n:::note Arrays only\\nThis only works on Arrays.\\n\\nInserts a value into the array at the given path, and returns the index and value. \\nIf no index is given, it will insert the value at the end of the array.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"value","desc":"","lua_type":"T"},{"name":"index","desc":"","lua_type":"number?"}],"returns":[],"function_type":"method","source":{"line":603,"path":"src/Server/ServerReplion.lua"}},{"name":"Remove","desc":"```lua\\nlocal newReplion = ReplionServer.new({\\n\\tChannel = \'Data\',\\n\\tReplicateTo = player,\\n\\tData = {\\n\\t\\tItems = {\\n\\t\\t\\t\'Bow\'\\n\\t\\t}\\n\\t}\\n})\\n\\nlocal item: string = newReplion:Remove(\'Items\')\\nprint(item) --\x3e \'Bow\'\\n```\\n\\n\\n:::note Arrays only\\nThis only works on Arrays.\\n\\nRemoves a value from the array at the given path, and returns the value.\\nIf no index is given, it will remove the value at the end of the array.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"index","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"T\\n"}],"function_type":"method","source":{"line":649,"path":"src/Server/ServerReplion.lua"}},{"name":"Clear","desc":"```lua\\nlocal newReplion = ReplionServer.new({\\n\\tChannel = \'Data\',\\n\\tReplicateTo = player,\\n\\tData = {\\n\\t\\tItems = {\\n\\t\\t\\t\'Bow\'\\n\\t\\t}\\n\\t}\\n})\\n\\nnewReplion:Clear(\'Items\')\\n\\nprint(newReplion:Get(\'Items\')) --\x3e {}\\n```\\n\\n\\n:::note Arrays only\\nThis only works on Arrays.\\n\\nClears the array at the given path.","params":[{"name":"path","desc":"","lua_type":"Path"}],"returns":[],"function_type":"method","source":{"line":698,"path":"src/Server/ServerReplion.lua"}},{"name":"Find","desc":"```lua\\nlocal newReplion = ReplionServer.new({\\n\\tChannel = \'Data\',\\n\\tReplicateTo = player,\\n\\tData = {\\n\\t\\tItems = {\\n\\t\\t\\t\'Bow\'\\n\\t\\t}\\n\\t}\\n})\\n\\nlocal index: number?, item: string? = newReplion:Find(\'Items\', \'Bow\')\\nprint(index, item) --\x3e 1, \'Bow\'\\n```\\n\\n\\n:::note Arrays only\\nThis only works on Arrays.\\n\\nTry to find the value in the array at the given path, and returns the index and value.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"value","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"number?"},{"desc":"","lua_type":"T?"}],"function_type":"method","source":{"line":742,"path":"src/Server/ServerReplion.lua"}},{"name":"Get","desc":"```lua\\nlocal coins: number? = Replion:Get(\'Coins\')\\n```\\n\\n\\nReturns the value at the given path.","params":[{"name":"path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"T?\\n"}],"function_type":"method","source":{"line":765,"path":"src/Server/ServerReplion.lua"}},{"name":"GetExpect","desc":"```lua\\nlocal coins: number = Replion:GetExpect(\'Coins\')\\nlocal gems: number = Replion:GetExpect(\'Gems\', \'Gems does not exist!\')\\n```\\n\\n\\n\\nSame as `Replion:Get`, but throws an error if the path does not have a value.\\nYou can set a custom error message by passing it as the second argument.","params":[{"name":"path","desc":"","lua_type":"Path"},{"name":"message","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"T\\n"}],"function_type":"method","errors":[{"lua_type":"\\"Invalid path\\"","desc":"This error is thrown when the path does not have a value."}],"source":{"line":812,"path":"src/Server/ServerReplion.lua"}},{"name":"Destroy","desc":"Disconnects all signals and send a Destroy event to the ReplicateTo.\\nYou cannot use a Replion after destroying it, this will throw an error.","params":[],"returns":[],"function_type":"method","source":{"line":829,"path":"src/Server/ServerReplion.lua"}}],"properties":[{"name":"Channel","desc":"","lua_type":"string","readonly":true,"source":{"line":104,"path":"src/Server/ServerReplion.lua"}},{"name":"Data","desc":"","lua_type":"{ [any]: any }","source":{"line":109,"path":"src/Server/ServerReplion.lua"}},{"name":"Destroyed","desc":"","lua_type":"boolean?","readonly":true,"source":{"line":116,"path":"src/Server/ServerReplion.lua"}},{"name":"Tags","desc":"","lua_type":"{ string }","readonly":true,"source":{"line":123,"path":"src/Server/ServerReplion.lua"}},{"name":"ReplicateTo","desc":"","lua_type":"ReplicateTo","readonly":true,"source":{"line":130,"path":"src/Server/ServerReplion.lua"}},{"name":"DisableAutoDestroy","desc":"","lua_type":"boolean?","readonly":true,"source":{"line":137,"path":"src/Server/ServerReplion.lua"}}],"types":[{"name":"Path","desc":"","lua_type":"string | { any }","source":{"line":85,"path":"src/Server/ServerReplion.lua"}},{"name":"ReplicateTo","desc":"","lua_type":"Player | { Player } | \'All\'","source":{"line":91,"path":"src/Server/ServerReplion.lua"}},{"name":"SerializedReplion","desc":"","lua_type":"{ any }","source":{"line":97,"path":"src/Server/ServerReplion.lua"}}],"name":"ServerReplion","desc":"","realm":["Server"],"source":{"line":143,"path":"src/Server/ServerReplion.lua"}}')}}]);