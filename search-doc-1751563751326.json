[{"title":"Client","type":0,"sectionRef":"#","url":"/Replion/api/Client","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client","url":"/Replion/api/Client#functions","content":" "},{"title":"OnReplionAdded​","type":1,"pageTitle":"Client","url":"/Replion/api/Client#OnReplionAdded","content":"&lt;/&gt; Client:OnReplionAdded(callback: (addedReplion: ClientReplion) → ()) → RBXScriptConnection  Calls the callback when a replion is added.  "},{"title":"OnReplionRemoved​","type":1,"pageTitle":"Client","url":"/Replion/api/Client#OnReplionRemoved","content":"&lt;/&gt; Client:OnReplionRemoved(callback: (replion: ClientReplion) → ()) → RBXScriptConnection  Calls the callback when a replion is removed.  "},{"title":"OnReplionAddedWithTag​","type":1,"pageTitle":"Client","url":"/Replion/api/Client#OnReplionAddedWithTag","content":"&lt;/&gt; Client:OnReplionAddedWithTag( tag: string, callback: (replion: ClientReplion) → () ) → RBXScriptConnection  Calls the callback when a replion with the given tag is added.  "},{"title":"OnReplionRemovedWithTag​","type":1,"pageTitle":"Client","url":"/Replion/api/Client#OnReplionRemovedWithTag","content":"&lt;/&gt; Client:OnReplionRemovedWithTag( tag: string, callback: (replion: ClientReplion) → () ) → RBXScriptConnection  Calls the callback when a replion with the given tag is removed.  "},{"title":"GetReplion​","type":1,"pageTitle":"Client","url":"/Replion/api/Client#GetReplion","content":"&lt;/&gt; Client:GetReplion(channel: string) → () Returns the replion with the given channel.  "},{"title":"WaitReplion​","type":1,"pageTitle":"Client","url":"/Replion/api/Client#WaitReplion","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Client:WaitReplion( channel: string, timeout: number? ) → () Yields until the replion with the given channel is added.  "},{"title":"AwaitReplion​","type":1,"pageTitle":"Client","url":"/Replion/api/Client#AwaitReplion","content":"&lt;/&gt; Client:AwaitReplion( channel: string, callback: (replion: ClientReplion) → (), timeout: number? ) → (() → ())? This function will call the callback when a replion with the channel is created. Returns a function that can be called to cancel the wait. "},{"title":"Server","type":0,"sectionRef":"#","url":"/Replion/api/Server","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#new","content":"&lt;/&gt; Server.new(config: ReplionConfig&lt;T&gt;) → ServerReplion&lt;T&gt; "},{"title":"Types","type":1,"pageTitle":"Server","url":"/Replion/api/Server##","content":""},{"title":"​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#ReplionConfig","content":"type ReplionConfig = { Channel: string, Data: {[any]: any}, Tags: {string}?, ReplicateTo: ReplicateTo, DisableAutoDestroy: boolean? }  Creates a new Replion.  "},{"title":"GetReplion​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#GetReplion","content":"&lt;/&gt; Server:GetReplion(channel: string) → ServerReplion&lt;T&gt;? Gets a Replion with the given channel. If multiple Replions exist with the same channel, it will throw an error.  "},{"title":"GetReplionFor​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#GetReplionFor","content":"&lt;/&gt; Server:GetReplionFor( player: Player , channel: string ) → ServerReplion&lt;T&gt;? Returns the first Replion that matches the channel.  "},{"title":"GetReplionsFor​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#GetReplionsFor","content":"&lt;/&gt; Server:GetReplionsFor(player: Player ) → () Returns all replions for the given player. Includes replions that are replicated to &quot;All&quot;.  "},{"title":"WaitReplion​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#WaitReplion","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server:WaitReplion( channel: string, timeout: number? ) → ServerReplion&lt;T&gt;? Wait for a replion with the given channel to be created.  "},{"title":"WaitReplionFor​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#WaitReplionFor","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server:WaitReplionFor( player: Player , channel: string, timeout: number? ) → ServerReplion&lt;T&gt;? Wait for a replion to be created for the player.  "},{"title":"AwaitReplion​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#AwaitReplion","content":"&lt;/&gt; Server:AwaitReplion( channel: string, callback: (replion: ServerReplion) → (), timeout: number? ) → (() → ())? The callback will be called when the replion with the given id is added. Returns a function that can be called to cancel the wait.  "},{"title":"AwaitReplionFor​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#AwaitReplionFor","content":"&lt;/&gt; Server:AwaitReplionFor( player: Player , channel: string, callback: (replion: ServerReplion) → (), timeout: number? ) → (() → ())? The callback will be called when the replion with the given id for the given player is added. Returns a function that can be called to cancel the wait.  "},{"title":"OnReplionAdded​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#OnReplionAdded","content":"&lt;/&gt; Server:OnReplionAdded(callback: ( channel: string, replion: ServerReplion ) → ()) → RBXScriptConnection  The callback will be called when a replion is added.  "},{"title":"OnReplionRemoved​","type":1,"pageTitle":"Server","url":"/Replion/api/Server#OnReplionRemoved","content":"&lt;/&gt; Server:OnReplionRemoved(callback: ( channel: string, replion: ServerReplion ) → ()) → RBXScriptConnection  The callback will be called when a replion is removed. "},{"title":"ClientReplion","type":0,"sectionRef":"#","url":"/Replion/api/ClientReplion","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#types","content":" "},{"title":"Path​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#Path","content":"&lt;/&gt; type Path = string | {string}  "},{"title":"Properties​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#properties","content":" "},{"title":"Destroyed​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#Destroyed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ClientReplion.Destroyed: boolean?   "},{"title":"Data​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#Data","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ClientReplion.Data: {[any]: any}   "},{"title":"Tags​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#Tags","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ClientReplion.Tags: {string}?   "},{"title":"ReplicateTo​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#ReplicateTo","content":"&lt;/&gt; ClientReplion.ReplicateTo: ReplicateTo  "},{"title":"Functions​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#functions","content":" "},{"title":"BeforeDestroy​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#BeforeDestroy","content":"&lt;/&gt; ClientReplion:BeforeDestroy(callback: (replion: ClientReplion) → ()) → RBXScriptConnection  Connects to a signal that is fired when the :Destroy() method is called.  "},{"title":"OnDataChange​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#OnDataChange","content":"&lt;/&gt; ClientReplion:OnDataChange(callback: ( newData: any, path: {string} ) → ()) → RBXScriptConnection  Connects to a signal that is fired when a value is changed in the data.  "},{"title":"OnChange​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#OnChange","content":"&lt;/&gt; ClientReplion:OnChange( path: Path, callback: ( newValue: any, oldValue: any ) → () ) → RBXScriptConnection  replion:OnChange('Coins', function(newValue: any, oldValue: any) print(newValue, oldValue) end) This function is called when the value of the path changes.  "},{"title":"OnArrayInsert​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#OnArrayInsert","content":"&lt;/&gt; ClientReplion:OnArrayInsert( path: Path, callback: ( index: number, value: any ) → () ) → RBXScriptConnection  Connects to a signal that is fired when a value is inserted in the array at the given path.  "},{"title":"OnArrayRemove​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#OnArrayRemove","content":"&lt;/&gt; ClientReplion:OnArrayRemove( path: Path, callback: ( index: number, value: any ) → () ) → RBXScriptConnection  Connects to a signal that is fired when a value is removed in the array at the given path.  "},{"title":"Find​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#Find","content":"&lt;/&gt; ClientReplion:Find( path: Path, value: T ) → ( number?, T? ) local index: number?, item: string? = replion:Find('Items', 'Bow') Arrays only This only works on Arrays. Try to find the value in the array at the given path, and returns the index and value.  "},{"title":"Get​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#Get","content":"&lt;/&gt; ClientReplion:Get(path: path) → T? local coins: number? = newReplion:Get('Coins') Returns the value at the given path. If no path is given, returns the entire data table. If you are expecting a value to exist, use Replion:GetExpect instead.  "},{"title":"GetExpect​","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion#GetExpect","content":"&lt;/&gt; ClientReplion:GetExpect( path: Path, message: string? ) → T local coins: number = Replion:GetExpect('Coins') local gems: number = Replion:GetExpect('Gems', 'Gems does not exist!') Same as Replion:Get, but throws an error if the path does not have a value. You can set a custom error message by passing it as the second argument. "},{"title":"Errors","type":1,"pageTitle":"ClientReplion","url":"/Replion/api/ClientReplion##","content":"Type\tDescription&quot;Invalid path&quot;\tThis error is thrown when the path does not have a value. "},{"title":"ServerReplion","type":0,"sectionRef":"#","url":"/Replion/api/ServerReplion","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#types","content":" "},{"title":"Path​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Path","content":"&lt;/&gt; type Path = string | {any}   "},{"title":"SerializedReplion​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#SerializedReplion","content":"&lt;/&gt; type SerializedReplion = {any}  "},{"title":"Properties​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#properties","content":" "},{"title":"Channel​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Channel","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ServerReplion.Channel: string   "},{"title":"Data​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Data","content":"&lt;/&gt; ServerReplion.Data: {[any]: any}   "},{"title":"Destroyed​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Destroyed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ServerReplion.Destroyed: boolean?   "},{"title":"Tags​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Tags","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ServerReplion.Tags: {string}   "},{"title":"ReplicateTo​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#ReplicateTo","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ServerReplion.ReplicateTo: ReplicateTo   "},{"title":"DisableAutoDestroy​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#DisableAutoDestroy","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ServerReplion.DisableAutoDestroy: boolean?  "},{"title":"Functions​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#functions","content":" "},{"title":"BeforeDestroy​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#BeforeDestroy","content":"&lt;/&gt; ServerReplion:BeforeDestroy(callback: (replion: ServerReplion) → ()) → RBXScriptConnection  Connects to a signal that is fired when the :Destroy() method is called.  "},{"title":"OnDataChange​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#OnDataChange","content":"&lt;/&gt; ServerReplion:OnDataChange(callback: ( newData: any, path: Path ) → ()) → RBXScriptConnection  Connects to a signal that is fired when a value is changed in the data.  "},{"title":"OnChange​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#OnChange","content":"&lt;/&gt; ServerReplion:OnChange( path: Path, callback: ( newValue: any, oldValue: any ) → () ) → RBXScriptConnection  Connects to a signal that is fired when the value at the given path is changed.  "},{"title":"OnArrayInsert​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#OnArrayInsert","content":"&lt;/&gt; ServerReplion:OnArrayInsert( path: Path, callback: ( index: number, value: any ) → () ) → RBXScriptConnection  Connects to a signal that is fired when a value is inserted in the array at the given path.  "},{"title":"OnArrayRemove​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#OnArrayRemove","content":"&lt;/&gt; ServerReplion:OnArrayRemove( path: Path, callback: ( index: number, value: any ) → () ) → RBXScriptConnection  Connects to a signal that is fired when a value is removed in the array at the given path.  "},{"title":"SetReplicateTo​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#SetReplicateTo","content":"&lt;/&gt; ServerReplion:SetReplicateTo(replicateTo: ReplicateTo) → () "},{"title":"Types","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion##","content":""},{"title":"​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#ReplicateTo","content":"type ReplicateTo = Player | {Player } | 'All'  Sets the players to which the data should be replicated.  "},{"title":"Set​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Set","content":"&lt;/&gt; ServerReplion:Set( path: Path | {[any]: any}, newValue: T ) → T local newCoins: number = Replion:Set('Coins', 79) print(newCoins) --&gt; 79 Sets the value at the given path to the given value. If you're updating a table is recommended to use ServerReplion:Update instead of ServerReplion:Set to avoid sending unnecessary data to the client.  "},{"title":"Update​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Update","content":"&lt;/&gt; ServerReplion:Update( path: Path, toUpdate: {[any]: any}? ) → () local newReplion = ReplionServer.new({ Channel = 'Data', ReplicateTo = 'All', Data = { Items = { Bow = true, } }, }) newReplion:Update('Items', { Sword = true, Bow = Replion.None }) newReplion:Update({ Level = 20, }) Updates the data with the given table. Only the keys that are different will be sent to the client. If you want to remove a key, set it to Replion.None. You can update the root data by passing a table as the first argument.  "},{"title":"Increase​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Increase","content":"&lt;/&gt; ServerReplion:Increase( path: Path, amount: number ) → () local newCoins: number = Replion:Increase('Coins', 20) Increases the value at the given path by the given amount.  "},{"title":"Decrease​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Decrease","content":"&lt;/&gt; ServerReplion:Decrease( path: Path, amount: number ) → () local newCoins: number = Replion:Decrease('Coins', 20) Decreases the value at the given path by the given amount.  "},{"title":"Insert​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Insert","content":"&lt;/&gt; ServerReplion:Insert( path: Path, value: T, index: number? ) → () local newReplion = ReplionServer.new({ Channel = 'Data', ReplicateTo = player, Data = { Items = { 'Bow' } } }) newReplion:Insert('Items', 'Sword') newReplion:Insert('Items', 'Diamond Sword', 1) Arrays only This only works on Arrays. Inserts a value into the array at the given path, and returns the index and value. If no index is given, it will insert the value at the end of the array.  "},{"title":"Remove​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Remove","content":"&lt;/&gt; ServerReplion:Remove( path: Path, index: number? ) → T local newReplion = ReplionServer.new({ Channel = 'Data', ReplicateTo = player, Data = { Items = { 'Bow' } } }) local item: string = newReplion:Remove('Items') print(item) --&gt; 'Bow' Arrays only This only works on Arrays. Removes a value from the array at the given path, and returns the value. If no index is given, it will remove the value at the end of the array.  "},{"title":"Clear​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Clear","content":"&lt;/&gt; ServerReplion:Clear(path: Path) → () local newReplion = ReplionServer.new({ Channel = 'Data', ReplicateTo = player, Data = { Items = { 'Bow' } } }) newReplion:Clear('Items') print(newReplion:Get('Items')) --&gt; {} Arrays only This only works on Arrays. Clears the array at the given path.  "},{"title":"Find​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Find","content":"&lt;/&gt; ServerReplion:Find( path: Path, value: T ) → ( number?, T? ) local newReplion = ReplionServer.new({ Channel = 'Data', ReplicateTo = player, Data = { Items = { 'Bow' } } }) local index: number?, item: string? = newReplion:Find('Items', 'Bow') print(index, item) --&gt; 1, 'Bow' Arrays only This only works on Arrays. Try to find the value in the array at the given path, and returns the index and value.  "},{"title":"Get​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Get","content":"&lt;/&gt; ServerReplion:Get(path: Path) → T? local coins: number? = Replion:Get('Coins') Returns the value at the given path.  "},{"title":"GetExpect​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#GetExpect","content":"&lt;/&gt; ServerReplion:GetExpect( path: Path, message: string? ) → T local coins: number = Replion:GetExpect('Coins') local gems: number = Replion:GetExpect('Gems', 'Gems does not exist!') Same as Replion:Get, but throws an error if the path does not have a value. You can set a custom error message by passing it as the second argument. "},{"title":"Errors","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion##","content":"Type\tDescription&quot;Invalid path&quot;\tThis error is thrown when the path does not have a value.  "},{"title":"Destroy​","type":1,"pageTitle":"ServerReplion","url":"/Replion/api/ServerReplion#Destroy","content":"&lt;/&gt; ServerReplion:Destroy() → () Disconnects all signals and send a Destroy event to the ReplicateTo. You cannot use a Replion after destroying it, this will throw an error. "}]